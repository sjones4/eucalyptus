/*
 * Gradle build for eucalyptus
 */

plugins {
  id 'idea'
}

subprojects {
  apply plugin: 'groovy'
  apply plugin: 'idea'
  apply plugin: 'java'
  apply plugin: 'java-library'

  version = file('../../../VERSION').text.trim()
  targetCompatibility = 1.8
  sourceCompatibility = 1.8

  sourceSets.main.java.srcDirs = []
  sourceSets.main.java.outputDir = file('build/classes/groovy/main')
  sourceSets.main.groovy.srcDirs += ['src/main/java', 'src/generated/java', 'build/src/main/java']

  sourceSets.test.java.srcDirs = []
  sourceSets.test.groovy.srcDirs += ['src/test/java', 'build/src/test/java']

  task testJar(type: Jar, dependsOn: testClasses) {
    description 'Assembles a jar archive containing the test classes.'
    group 'Build'
    baseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
  }

  repositories {
    jcenter( )
  }

  configurations {
    tests

    apiElements { // known issue, configure the groovy plugin to work with java library plugin
      outgoing.variants.getByName('classes').artifact(
          file: compileGroovy.destinationDir,
          type: ArtifactTypeDefinition.JVM_CLASS_DIRECTORY,
          builtBy: compileGroovy)
      outgoing.variants.getByName('classes').artifact(
          file: processResources.destinationDir,
          type: ArtifactTypeDefinition.JVM_RESOURCES_DIRECTORY,
          builtBy: processResources)
    }
  }

  artifacts {
    tests testJar
  }

  dependencies {
    if ( file('ivy.xml').exists( ) ) {
      def module = new XmlParser().parse( file('ivy.xml') )
      module.dependencies.dependency.each {
        api project(":${it.'@name'}")
      }
      module.dependencies.dependency.each {
        testImplementation project(path: ":${it.'@name'}", configuration: 'tests')
      }
    }

    testImplementation 'org.hamcrest:hamcrest-integration:1.3' // 1.2
    testImplementation 'junit:junit:4.11'
    testImplementation 'org.apache.derby:derby:10.8.3.0'
    testImplementation 'org.jmock:jmock:2.6.0'
    testImplementation 'org.jmock:jmock-junit4:2.6.0'
    testImplementation('org.spockframework:spock-core:0.7-groovy-2.0') {
      exclude module: 'groovy-all' // we include the indy variant
    }
  }

  compileJava {
    options.compilerArgs << "-s"
    options.compilerArgs << "$project.buildDir/src/main/java"
    options.compilerArgs << "-implicit:class"
    options.debug = true
    doFirst {
        file("$project.buildDir/src/main/java").mkdirs()
    }
  }

  compileGroovy {
    options.compilerArgs << "-s"
    options.compilerArgs << "$project.buildDir/src/main/java"
    options.compilerArgs << "-implicit:class"
    doFirst {
      file("$project.buildDir/src/main/java").mkdirs()
    }
  }

  idea {
    module {
      name -= ~/^eucalyptus-/

      excludeDirs = [
        file( "$buildDir/classes" ),
        file( "$buildDir/test-classes" )
      ]

      iml {
        beforeMerged { module ->
          module.excludeFolders.clear( )
        }

        whenMerged { module ->
          if ( name != 'msgs' ) {
            def remove = module.dependencies.findAll{
                it instanceof org.gradle.plugins.ide.idea.model.ModuleLibrary
              }.findAll{ moduleLibrary ->
                moduleLibrary.classes.find{ it.url.startsWith('jar:') }
              }

            module.dependencies.removeAll( remove )
          }
          module.dependencies*.exported = true
        }
      }
    }
  }
}

task copyJars(type: Copy) {
  description 'Copies jar build artifacts to target directory.'
  group 'Output'
  from subprojects.collect{ it.tasks.withType(Jar) }
  into "target"
  exclude '**/test-eucalyptus-*.jar'
}

task copyDependencies(type: Copy) {
  description 'Copies jar dependencies to target/lib directory.'
  group 'Output'
  from subprojects.collect{ it.configurations.runtimeClasspath }
  into 'target/lib'
  exclude '**/eucalyptus-*.jar'
}

task copyTestDependencies(type: Copy) {
  description 'Copies test jar dependencies to target/lib/tests directory.'
  group 'Output'
  from subprojects.collect{ it.configurations.testRuntimeClasspath - it.configurations.runtimeClasspath }
  into 'target/lib/tests'
  exclude '**/eucalyptus-*.jar'
  exclude '**/test-eucalyptus-*.jar'
}

task copyAllDependencies(dependsOn: [ 'copyDependencies', 'copyTestDependencies' ] ) {
  description 'Copies main and test jar dependencies under target/lib directory.'
  group 'Output'
}

task testReport(type: TestReport) {
  description 'Generates HTML junit report under target/reports/tests directory.'
  destinationDir = file("target/reports/tests")
  mustRunAfter subprojects*.test
  reportOn subprojects*.test
}

task test {
  finalizedBy( testReport )
}

task build {
  finalizedBy( testReport )
}

idea {
  project {
    jdkName = '1.8'
    languageLevel = '1.8'
    modules = subprojects.collect{ it.idea.module }

    ipr {
      withXml {
        def projectNode = it.asNode( )
        def componentNode = projectNode?.component?.getAt(0)
        def annotationProcessingNode = componentNode?.annotationProcessing?.getAt(0)
        if ( componentNode && componentNode['@name'] == 'CompilerConfiguration' &&
            ( !annotationProcessingNode || annotationProcessingNode['@enabled'] == 'false' ) ) {
          if ( annotationProcessingNode ) {
            componentNode.remove( annotationProcessingNode )
          }
          componentNode.append( new groovy.util.XmlParser( ).parseText(
            '''<annotationProcessing>
                  <profile default="true" name="Default" enabled="true">
                    <sourceOutputDir name="build/src/main/java" />
                    <sourceTestOutputDir name="build/src/test/java" />
                    <outputRelativeToContentRoot value="true" />
                    <processorPath useClasspath="true" />
                  </profile>
                </annotationProcessing>'''
          ) )
        }
      }
    }
  }
}
